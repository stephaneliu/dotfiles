#!/bin/sh

# Exits immediately on error
set -e


test() {
  if ! [[ -z "$TEST" ]]; then
    $1
  fi
}


if xcode-select --version >/dev/null 2>&1; then
  echo "+++ Xcode command line tools already installed"
else
  echo "+++ Installing Xcode command line tools"
  xcode-select --install
fi

test $HOME/.dotfiles/test/xcode_test



if brew --version >/dev/null 2>&1; then
  echo "+++ Homebrew already installed"
else
  echo "+++ Installing Homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

test $HOME/.dotfiles/test/homebrew_test



# Don't install anything if this is a test run
if [[ -z "$TEST" ]]; then
  echo "+++ Installing Homebrew packages"
  brew update
  brew tap homebrew/bundle
  brew bundle --file=$HOME/.dotfiles/Brewfile
else
  # Test Dependencies
  brew install -q neovim
  brew install -q mise
  brew install -q rcm
fi

test $HOME/.dotfiles/test/rcup_test



# Since oh-my-zsh replaces .zshrc, install oh-my-zsh before rcm
if [ -d $HOME/.oh-my-zsh ]; then
  echo "+++ Oh-my-zsh already installed"
else
  touch $HOME/.zshrc
  echo "+++ Installing oh-my-zsh"
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
  echo "+++ If changing shell (chsh) to zsh failed, sudo bash then 'chsh -s $(brew --prefix)/bin/zsh {user}'"

  test $HOME/.dotfiles/test/oh_my_zsh_test
fi

if ! [ -d $HOME/.oh-my-zsh/custom/themes/powerlevel10k ]; then
  echo "+++ Installing Powerlevel10k themes for Oh-my-zsh"
  git clone https://github.com/romkatv/powerlevel10k $HOME/.oh-my-zsh/custom/themes/powerlevel10k
fi

if ! [ -d $HOME/.oh-my-zsh/custom/plugins/mise ]; then
  echo '+++ Installing mise autocomplete'
  mkdir -p $HOME/.oh-my-zsh/custom/plugins/mise
  mise completion zsh > $HOME/.oh-my-zsh/custom/plugins/mise/_mise
fi

test $HOME/.dotfiles/test/oh_my_zsh_customizations_test



export PATH=$(brew --prefix)/bin:$PATH

# activate submodule before running rcup so submodules link correctly
cd $HOME/.dotfiles
echo "+++ Updating git submodules"
git submodule update
cd $HOME

test $HOME/.dotfiles/test/git_submodule_test



echo "+++ Linking dotfiles"
RCRC=$HOME/.dotfiles/rcrc rcup -fq
# Create git ignored directory
echo "+++ Creating git ignored directory, .vim/bundle"
mkdir -p $HOME/.vim/bundle

test $HOME/.dotfiles/test/rcm_test



echo "+++ Installing vim-plug"
sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'



echo "+++ Installing Vim packages"
# shada file, .viminfo, is owned by root on GH CI. Set -i NONE does not read or write to shada file
nvim --headless -i NONE +PlugInstall +qa



# Don't install Copilot during test run until we can exit after install without installation which require user input
if [[ -z "$TEST" ]]; then
  echo "+++ Install Github Copilot"
  echo "### Manually exit vim after Copilot is installed"
  nvim -i NONE +"Copilot setup" +qa
fi



echo "+++ Enahancing Rails intellisence for solargraph"
if [ ! -d $HOME/code/rails-intellisence-in-solargraph-enhancement ]; then
  mkdir -p $HOME/code/rails-intellisence-in-solargraph-enhancement

  git clone https://gist.github.com/castwide/28b349566a223dfb439a337aea29713e \
    $HOME/code/rails-intellisence-in-solargraph-enhancement
fi

echo '+++ symlink ~/code/rails-intellisence-in-solargraph-enhancement/rails.rb into config/definition.rb for each Rails project'



# echo "+++ Installing TailwindCSS language server"
# yarn global add @tailwindcss/language-server



if [ ! -d $HOME/tmp ]; then
  echo "+++ Creating a tmp folder in $HOME"
  mkdir $HOME/tmp
fi



# Skip if running on CI
if [[ -z "$TEST" ]]; then
  echo "+++ Installing 'tag' directories setup"
  for setup in $HOME/.dotfiles/tag-*/setup; do
    . "$setup"
  done

  echo "+++ Restoring application preferences"
  $HOME/bin/plist import

  echo "+++ Setting defaults for OSX"
  . $HOME/.dotfiles/system/osx-settings

  echo "+++ Installing MonoLisa fonts"
  cp -r $HOME/Documents/resource/Software/fonts/MonoLisa-basic-2.005-ttf/ttf/*.ttf $HOME/Library/Fonts

  printf "%s " "Login into 1Password and let it synchronize. Press <ENTER> when done."
  read response

  # More - https://support.1password.com/docs/cli/get-started
  echo "+++ Creating npm token from 1Password"
  echo $(op read op://Private/NPM\ token/notesPlain) > $HOME/.zsh/npm.zsh
fi



echo "+++ Done!"
