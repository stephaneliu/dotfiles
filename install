#!/bin/sh

# Exits immediately on error
set -e

if xcode-select --version >/dev/null 2>&1; then
  echo "Xcode command line tools already installed"
else
  echo "Installing Xcode command line tools"
  xcode-select --install
fi

if ! [[ -z "$TEST" ]]; then
  .dotfiles/test/xcode_test
fi

if brew --version >/dev/null 2>&1; then
  echo "Homebrew already installed"
else
  echo "Installing Homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

if ! [[ -z "$TEST" ]]; then
  .dotfiles/test/homebrew_test
fi

# Don't install anything if this is a test run
if [[ -z "$TEST" ]]; then
  echo "Installing Homebrew packages"
  brew update
  brew tap homebrew/bundle
  brew bundle --file=.dotfiles/Brewfile
else
  # Test Dependencies
  # brew install neovim
  # brew install rtx
  brew install rcm
fi

if ! [[ -z "$TEST" ]]; then
  .dotfiles/test/rcup_test
fi

export PATH=$(brew --prefix)/bin:$PATH

echo "Linking dotfiles"
# Delete kitty_grab
# rm vim/bundle
# .dotfiles/install.sh
RCRC=$PWD/.dotfiles/rcrc rcup -fv

# Create git ignored directory
mkdir -p $HOME/.vim/bundle

if ! [[ -z "$TEST" ]]; then
  .dotfiles/test/rcm_test
fi


echo "Installing vim-plug"
sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

echo "Installing Vim packages"
nvim --headless +PlugInstall +qa
#
# cd $HOME
# echo "Enahancing Rails intellisence for solargraph"
# if [ ! -d $HOME/code/rails-intellisence-in-solargraph-enhancement ]; then
#   mkdir $HOME/code/rails-intellisence-in-solargraph-enhancement
# fi
# git clone https://gist.github.com/castwide/28b349566a223dfb439a337aea29713e \
#   $HOME/code/rails-intellisence-in-solargraph-enhancement
#
# echo "Installing TailwindCSS language server"
# yarn global add @tailwindcss/language-server
#
# echo 'symlink ~/code/rails-intellisence-in-solargraph-enhancement/rails.rb into config/definition.rb \
#   for each Rails project'
#
# if [ -d $HOME/.oh-my-zsh ]; then
#   echo "Oh-my-zsh already installed"
# else
#   echo "Installing oh-my-zsh"
#   sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
#   echo "If changing shell (chsh) to zsh failed, sudo bash then 'chsh -s $(brew --prefix)/bin/zsh {user}'"
#
#   echo "Installing Powerlevel10k thems for Oh-my-zsh"
#   git clone https://github.com/romkatv/ppowerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
# fi
#
# cd ${install_dir}
#
# for setup in tag-*/setup; do
#   . "$setup"
# done
#
# echo "Install Github Copilot"
# vi +CopilotInstall +qa
# # Import iTerm profile with solarized colors and remap of meta key to Esc+ for <M-[> and <M-]> (next
# # and previouis suggestion to work in Copilot.
# # https://github.com/github-community/community/discussions/6862#discussioncomment-3012543
# cp $HOME/.dotfiles/iterm2/Solarized.itermcolors $HOME/Library/Application\ Support/iTerm2/DynamicProfiles/
#
# if [ ! -d $HOME/tmp ]; then
#   echo "Creating a tmp folder in $HOME"
#   mkdir $HOME/tmp
# fi
#
# echo "Setting defaults for OSX"
# . ./system/osx-settings
#
# count=0
#
# until [ -f "$HOME/.env.private" ]; do
#   if [ $count -eq 0 ]; then
#     let count++
#     echo "Copy .private.env from 1Password to $HOME <ENTER|(q)uit>"
#     read response
#
#     if [ "$response" = "q" ]; then
#       echo "Quitting..."
#       exit 0
#     fi
#   elif [ ! -f "$HOME/.env.private" ]; then
#     echo "$HOME/.private.env could not be found. <ENTER|(q)uit>"
#     read response
#
#     if [ "$response" = "q" ]; then
#       echo "Quitting..."
#       exit 0
#     fi
#   fi
# done
#
# echo "Installing MonoLisa fonts"
# cp -r $HOME/Documents/resource/Software/fonts/MonoLisa-basic-2.005-ttf/ttf/*.ttf $HOME/Library/Fonts
#
# echo "Restoring application preferences"
# $HOME/bin/plist import
#
# # If this fails, read https://support.1password.com/docs/cli/get-started
# echo "Creating npm token from 1Password"
# echo $(op read op://Private/NPM\ token/notesPlain) > $HOME/.zsh/npm.zsh
#
# echo "Done!"
