#!/bin/sh

# Exits immediately on error
# set -e # disabled until script is stabilized
install_dir=$PWD
unset GIT_SSL_CERT

source $HOME/.dotfiles/bin/os_type.sh

echo "Installing Homebrew packages"
brew update
brew tap homebrew/bundle
brew bundle
for brewfile in */Brewfile; do
  brew bundle --file="$brewfile"
done

export PATH=$(brew --prefix)/bin:$PATH

# Link libpq to /usr/local/bin

# Before `rcup` runs, there is no ~/.rcrc, so we must tell `rcup` where to look.
# We need the rcrc because it tells `rcup` to ignore thousands of useless Vim
# backup files that slow it down significantly.
# Pass -v flag to run with verbose
cd $HOME

echo "Linking dotfiles into $HOME"
RCRC=$HOME/.dotfiles/rcrc rcup -f

if [ ! -d $HOME/.vim/bundle/Vundle.vim ]; then
  git clone https://github.com/VundleVim/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
fi

echo "Installing Vim packages"
vi +PluginInstall +qa

cd $HOME
echo "Enahancing Rails intellisence for solargraph"
if [ ! -d $HOME/code/rails-intellisence-in-solargraph-enhancement ]; then
  mkdir $HOME/code/rails-intellisence-in-solargraph-enhancement
fi
git clone https://gist.github.com/castwide/28b349566a223dfb439a337aea29713e \
  $HOME/code/rails-intellisence-in-solargraph-enhancement

echo "Installing TailwindCSS language server"
yarn config set prefix # https://www.jennapederson.com/blog/2019/10/20/using-yarn-global-packages-with-asdf/
yarn global add @tailwindcss/language-server

echo 'symlink ~/code/rails-intellisence-in-solargraph-enhancement/rails.rb into config/definition.rb \
  for each Rails project'

if [ -d $HOME/.oh-my-zsh ]; then
  echo "Oh-my-zsh already installed"
else
  echo "Installing oh-my-zsh"
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
  echo "If changing shell (chsh) to zsh failed, sudo bash then 'chsh -s $(brew --prefix)/bin/zsh {user}'"

  echo "Installing Powerlevel10k thems for Oh-my-zsh"
  git clone https://github.com/romkatv/ppowerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
fi

if [! -d $HOME/.hammerspoon/Spoons/VimMode.spoon ]; then
  #####  Hammerspoon - vim mode  #####
  echo "Configuring hammerspoon vim mode"
  bash <(curl -s https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/bin/installer)
fi

if [! -d $HOME/.hammerspoon/Spoons/SpoonInstall.spoon ]; then
  echo "Script to install Hammerspoon vim mode failed to install SpoonInstall"
  echo "See https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/bin/installer -
  bootstrap_spoon_install and use `wget -nv --no-check-certificate`"
fi

cd ${install_dir}

for setup in tag-*/setup; do
  . "$setup"
done

echo "Install Github Copilot"
vi +CopilotInstall +qa
# Import iTerm profile with solarized colors and remap of meta key to Esc+ for <M-[> and <M-]> (next
# and previouis suggestion to work in Copilot.
# https://github.com/github-community/community/discussions/6862#discussioncomment-3012543
cp $HOME/.dotfiles/iterm2/Solarized.itermcolors $HOME/Library/Application\ Support/iTerm2/DynamicProfiles/

if [ ! -d $HOME/tmp ]; then
  echo "Creating a tmp folder in $HOME"
  mkdir $HOME/tmp
fi

echo "Setting defaults for OSX"
. ./system/osx-settings

count=0

until [ -f "$HOME/.env.private" ]; do
  if [ $count -eq 0 ]; then
    let count++
    echo "Copy .private.env from 1Password to $HOME <ENTER|(q)uit>"
    read response

    if [ "$response" = "q" ]; then
      echo "Quitting..."
      exit 0
    fi
  elif [ ! -f "$HOME/.env.private" ]; then
    echo "$HOME/.private.env could not be found. <ENTER|(q)uit>"
    read response

    if [ "$response" = "q" ]; then
      echo "Quitting..."
      exit 0
    fi
  fi
done

echo "###### TODO ######"
echo "Update .zsh/npm.zsh token from 1Password"
echo "Done!"
